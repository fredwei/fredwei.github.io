[{"title":"使用webpack构建时给window绑定事件的坑","date":"2017-03-28T07:45:25.000Z","path":"2017/03/28/使用webpack构建时给window绑定事件的坑/","text":"使用webpack进行构建，给window绑定了onload的事件，结果竟然死活不触发！各种排除后发现问题所在… 业务js文件index.js 12345678var $ = require('jquery');$(function()&#123; // 在这里绑定，无效 $(window).on('load', function()&#123; console.log('页面加载完成了~'); &#125;);&#125;) 打开页面，然后控制台并没有打印出“页面加载完成了~” 难道是使用jquery进行绑定的原因导致事件绑定无效？于是改了代码： 12345678var $ = require('jquery');$(function()&#123; // 在这里绑定，还是无效 window.onload = function()&#123; console.log('页面加载完成了~'); &#125;;&#125;) 控制台依然没有打印出预期的结果，苦思良久，改成 123456789101112131415var $ = require('jquery');// 在这里绑定，有效$(window).on('load', function()&#123; console.log('页面加载完成了~ 1');&#125;);// 在这里绑定，也有效window.onload = function()&#123; console.log('页面加载完成了~ 2');&#125;;$(function()&#123; &#125;) 那看来是’$(function(){})’这一段代码的问题了，这段代码并不难理解，当页面的dom结构加载完毕则执行，刚入门是使用’script’标签引入jquery，并没有这样的问题出现。 那么现在看来是使用webpack进行构建的并发症了，至于原因，并没有深究的意愿。 现在页面的js基本都是放在页面底部，程序执行到这里，其实意味着dom结构以及渲染完毕了，个人觉得在js中写’$(function(){})’是没有必要了的","tags":[{"name":"webpack","slug":"webpack","permalink":"http://fredwei.com/tags/webpack/"},{"name":"jquery","slug":"jquery","permalink":"http://fredwei.com/tags/jquery/"}]},{"title":"使用hexo遇到的一个坑","date":"2017-03-23T03:46:16.000Z","path":"2017/03/23/使用hexo遇到的一个坑/","text":"hexo中首页列表的摘要（excerpt）弄不出来，一直显示全文 修改了N多配置都不生效，官方文档中也没有说明，唯有各种搜索答案，终于找到了！ 原来只需要在文中加入&lt;!-- more --&gt;就可以了，这实在是个大坑！ 12345这就是一个简介&lt;!-- more --&gt; 这里更多的内容 原答案链接","tags":[{"name":"hexo","slug":"hexo","permalink":"http://fredwei.com/tags/hexo/"}]},{"title":"Express路由","date":"2017-03-22T08:11:33.000Z","path":"2017/03/22/express路由/","text":"一、简介 1、Express 是一个基于 Node.js 平台的极简、灵活的web应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。 2、丰富的 HTTP 快捷方法和任意排列组合的 Connect 中间件，让你创建健壮、友好的 API 变得既快速又简单。 （ Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架） 3、Express 不对 Node.js 已有的特性进行二次抽象，我们只是在它之上扩展了 Web 应用所需的基本功能。 &nbsp; 二、express环境搭建1、安装nodejs和npm，建议安装淘宝提供的国内镜像cnpm，这样安装比较快 1$ npm install –g cnpm 2、新建一个目录，在目录下执行 1$ cnpm install express --save 3、express环境已经搭建好了 &nbsp; 三、基本路由1、简单版，除了get请求，还有post、put、delete 123456789101112131415161718192021222324252627282930313233343536373839404142var express = require('express');var app = express();app.get('/', function (req, res) &#123; res.send('Hello World! &lt;a href=\"/news\"&gt;to news&lt;/a&gt;');&#125;);app.get('/news', function (req, res) &#123; res.send('this is news. &lt;a href=\"/\"&gt;back&lt;/a&gt;');&#125;).post('/news', function (req, res) &#123; console.log('query：' + req.query); console.log('body：' + req.body); res.send(&#123; code: 'abc123', msg: 'get a post request!', data: req.query &#125;);&#125;).put('/news', function (req, res) &#123; console.log('query：' + req.query); console.log('body：' + req.body); res.send(&#123; code: 'abc123', msg: 'get a put request!', data: req.query &#125;);&#125;).delete('/news', function (req, res) &#123; console.log('query：' + req.query); console.log('body：' + req.body); res.send(&#123; code: 'abc123', msg: 'get a delete request!', data: req.query &#125;);&#125;);var server = app.listen(12345, function () &#123; var host = server.address().address; var port = server.address().port; console.log('Example app listening at http://%s:%s', host, port);&#125;); 2、字符匹配模式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465var express = require('express');var app = express();// 路径var _routeStr = ['start'];var _routeList = ['&lt;ol&gt;'];_routeList.push('&lt;li&gt;ab?cd（匹配 acd 和 abcd）&lt;/li&gt;');_routeList.push('&lt;li&gt;ab+cd（匹配 abcd、abbcd、abbbcd等）&lt;/li&gt;');_routeList.push('&lt;li&gt;ab*cd（匹配 abcd、abxcd、abRABDOMcd、ab123cd等）&lt;/li&gt;');_routeList.push('&lt;li&gt;ab(cd)?e（匹配 /abe 和 /abcde）&lt;/li&gt;');_routeList.push('&lt;/ol&gt;');app.all('*', function (req, res, next) &#123; console.log('Accessing：' + new Date()); _routeStr = ['start']; next();&#125;);// 匹配 acd 和 abcdapp.get('/ab?cd', function(req, res, next) &#123; // res.send('ab?cd'); _routeStr.push('ab?cd'); next();&#125;);// 匹配 abcd、abbcd、abbbcd等app.get('/ab+cd', function(req, res, next) &#123; // res.send('ab+cd'); _routeStr.push('ab+cd'); next();&#125;);// 匹配 abcd、abxcd、abRABDOMcd、ab123cd等app.get('/ab*cd', function(req, res, next) &#123; // res.send('ab*cd'); _routeStr.push('ab*cd'); next();&#125;);// 匹配 /abe 和 /abcdeapp.get('/ab(cd)?e', function(req, res, next) &#123; // res.send('ab(cd)?e'); _routeStr.push('ab(cd)?e'); next();&#125;);app.get('*', function(req, res) &#123; _routeStr.push('end'); var _html = '&lt;p&gt;' + _routeStr.join(' ====&gt; ') + '&lt;/p&gt;'; res.send(_routeList.join('') + _html);&#125;);var server = app.listen(12345, function () &#123; var host = server.address().address; var port = server.address().port; console.log('Example app listening at http://%s:%s', host, port);&#125;); 3、正则匹配模式 12345678910111213141516171819202122232425262728293031323334353637383940414243444546var express = require('express');var app = express();// 路径var _routeStr = ['start'];var _routeList = ['&lt;ol&gt;'];_routeList.push('&lt;li&gt;/a/（匹配任何路径中含有 a 的路径');_routeList.push('&lt;li&gt;/.*fly$/（匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等）&lt;/li&gt;');_routeList.push('&lt;/ol&gt;');app.all('*', function (req, res, next) &#123; console.log('Accessing：' + new Date()); _routeStr = ['start']; next();&#125;);// 匹配任何路径中含有 a 的路径：app.get(/a/, function(req, res, next) &#123; _routeStr.push('/a/'); next();&#125;);// 匹配 butterfly、dragonfly，不匹配 butterflyman、dragonfly man等app.get(/.*fly$/, function(req, res, next) &#123; _routeStr.push('/.*fly$/'); next();&#125;);app.get('*', function(req, res) &#123; _routeStr.push('end'); var _html = '&lt;p&gt;' + _routeStr.join(' ====&gt; ') + '&lt;/p&gt;'; res.send(_routeList.join('') + _html);&#125;);var server = app.listen(12345, function () &#123; var host = server.address().address; var port = server.address().port; console.log('Example app listening at http://%s:%s', host, port);&#125;); 3、执行多个回调 1234567891011121314151617181920212223242526272829303132333435363738var express = require('express');var app = express();// 多个回调函数，需指定执行nextapp.get('/b', function (req, res, next) &#123; console.log('this is function b one'); next();&#125;, function (req, res) &#123; console.log('this is function b two'); res.send('Hello from B!');&#125;);// 多个回调传入，需指定执行next，最后必须有sendvar cb0 = function (req, res, next) &#123; console.log('CB0'); next();&#125;var cb1 = function (req, res, next) &#123; console.log('CB1'); next();&#125;var cb2 = function (req, res) &#123; res.send('Hello from C!');&#125;app.get('/c', [cb0, cb1, cb2]);var server = app.listen(12345, function () &#123; var host = server.address().address; var port = server.address().port; console.log('Example app listening at http://%s:%s', host, port);&#125;); &nbsp; 四、中间件router1、通过require导入各种路由配置文件 12345678910111213141516171819202122var express = require('express');var app = express();var _router1 = require('./router/r1.js');var _router2 = require('./router/r2.js');var _router3 = require('./router/r3.js');var _router4 = require('./router/r4.js');app.use('/', _router1);app.use('/r2', _router2);app.use('/r3', _router3);app.use('/r4', _router4);var server = app.listen(12345, function () &#123; var host = server.address().address; var port = server.address().port; console.log('Example app listening at http://%s:%s', host, port);&#125;); 2、简单版 1234567891011121314151617181920var express = require('express');var router = express.Router();// 该路由使用的中间件router.use(function (req, res, next) &#123; console.log('Time:', Date.now()); next();&#125;);// 定义网站主页的路由router.get('/', function(req, res) &#123; res.send('Birds home page');&#125;);// 定义 about 页面的路由router.get('/about', function(req, res) &#123; res.send('About birds');&#125;);module.exports = router; 3、通过路由中间件控制 1234567891011121314151617181920212223242526272829303132333435363738var express = require('express');var router = express.Router();// 该路由使用的中间件router.use(function (req, res, next) &#123; console.log('Time:', Date.now()); next();&#125;);// 一个中间件栈，显示任何指向 /user/:id 的 HTTP 请求的信息router.use('/user/:id', function(req, res, next) &#123; console.log('Request URL:', req.originalUrl); next();&#125;, function (req, res, next) &#123; console.log('Request Type:', req.method); next();&#125;);// 一个中间件栈，处理指向 /user/:id 的 GET 请求router.get('/user/:id', function (req, res, next) &#123; console.log(req.params, req.params.id == 0); // 如果 user id 为 0, 跳到下一个路由 if (req.params.id == 0)&#123; res.send('ID：' + req.params.id); &#125; // 负责将控制权交给栈中下一个中间件 else&#123; next(); &#125;&#125;, function (req, res, next) &#123; // 渲染常规页面 res.send('next function ID：' + req.params.id); // 填到下一个路由 // next();&#125;);module.exports = router; 使用router.param 123456789101112131415161718192021222324252627282930var express = require('express');var router = express.Router();// 该路由使用的中间件router.use(function (req, res, next) &#123; console.log('Time:', Date.now()); next();&#125;);var _pid;router.get('/blog/:pid', function (req, res, next) &#123; console.log('get function');&#125;);router.param('pid', function (req, res, next, pid)&#123; console.log('param function'); // console.log(req.query); setTimeout(function()&#123; _pid = pid; res.send('my pid is：' + pid + '&amp;&amp;' + req.query.id); &#125;, 1000); next();&#125;);module.exports = router; 多个参数的情况下 12345678910111213141516171819202122232425262728293031323334353637var express = require('express');var router = express.Router();// 该路由使用的中间件router.use(function (req, res, next) &#123; console.log('Time:', Date.now()); next();&#125;);// 无效，可能是版本问题// router.param(['id', 'page'], function (req, res, next, value) &#123;// console.log('CALLED ONLY ONCE with', value);// next();// &#125;)router.param('nid', function (req, res, next, value) &#123; console.log('nid：', value); next();&#125;);router.param('page', function (req, res, next, value) &#123; console.log('page：', value); next();&#125;);router.get('/news/:nid/:page', function (req, res, next) &#123; console.log('although this matches'); next();&#125;);router.get('/news/:nid/:page', function (req, res) &#123; console.log('and this matches too'); res.send('ok');&#125;);module.exports = router; &nbsp; 五、静态资源目录也算是属于路由中的一部分，负责静态资源的路径设置 1234567891011121314151617181920212223242526var express = require('express');var app = express();app.use(express.static(__dirname + '/images'));app.use('/pic', express.static(__dirname + '/images'));app.use('/img', express.static(__dirname + '/images'));app.get('/img', function (req, res) &#123; var _html = ''; _html += '&lt;p&gt;/icon.png&lt;/p&gt;&lt;img src=\"/icon.png\" /&gt;'; _html += '&lt;p&gt;/pic/icon.png&lt;/p&gt;&lt;img src=\"/pic/icon.png\" /&gt;'; _html += '&lt;p&gt;/img/icon.png&lt;/p&gt;&lt;img src=\"/img/icon.png\" /&gt;'; res.send(_html);&#125;);var server = app.listen(12345, function () &#123; var host = server.address().address; var port = server.address().port; console.log('Example app listening at http://%s:%s', host, port);&#125;); &nbsp; 六、实例源码github express_demo","tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://fredwei.com/tags/nodejs/"},{"name":"express","slug":"express","permalink":"http://fredwei.com/tags/express/"},{"name":"router","slug":"router","permalink":"http://fredwei.com/tags/router/"}]}]